diff --git a/dist/index.js b/dist/index.js
index 1506d53201f8227dae677608e570acf46cda75a9..6fb69411b922358dfedb93db4cbcf1a838e5d1f2 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -105,30 +105,33 @@ function WritableComputed({ store }) {
   for (const key in rawStore) {
     const originalComputed = rawStore[key];
     if (isComputed(originalComputed)) {
-      const originalFn = originalComputed.effect.fn;
-      rawStore[key] = (0, import_vue.customRef)((track, trigger) => {
-        const overriddenFn = () => (
-          // @ts-expect-error: internal value
-          originalComputed._value
-        );
-        return {
-          get: () => {
-            track();
-            return originalComputed.value;
-          },
-          set: (newValue) => {
-            if (newValue === void 0) {
-              originalComputed.effect.fn = originalFn;
-              delete originalComputed._value;
-              originalComputed._dirty = true;
-            } else {
-              originalComputed.effect.fn = overriddenFn;
-              originalComputed._value = newValue;
-            }
-            (0, import_vue.triggerRef)(originalComputed);
-            trigger();
+      const originalFn = originalComputed.fn;
+      // override the computed with a new one
+      const overriddenFn = () =>
+        // @ts-expect-error: internal cached value
+        originalComputed._value;
+      // originalComputed.fn = overriddenFn
+
+      rawStore[key] = import_vue.computed<unknown>({
+        get() {
+          return originalComputed.value;
+        },
+        set(newValue) {
+          // reset the computed to its original value by setting it to its initial state
+          if (newValue === undefined) {
+            originalComputed.fn = originalFn;
+            // @ts-expect-error: private api to remove the current cached value
+            delete originalComputed._value;
+            // @ts-expect-error: private api to force the recomputation
+            originalComputed._dirty = true;
+          } else {
+            originalComputed.fn = overriddenFn;
+            // @ts-expect-error: private api
+            originalComputed._value = newValue;
           }
-        };
+          // this allows to trigger the original computed in setup stores
+          triggerRef(originalComputed);
+        },
       });
     }
   }
